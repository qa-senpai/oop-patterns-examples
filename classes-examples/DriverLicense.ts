// Принципи програмування:
// DRY - don't repeat yourself (не повторюй себе - уникай дублювання коду)
// KISS - keep it simple stupid (роби простіше - уникай надмірної складності)
// YAGNI - you aint gona need it (не будеш потребувати - не додавай зайву функціональність)

/**
 * Клас DriverLicense (Водійське посвідчення) - це шаблон/план для створення об'єктів
 * який описує структуру даних та поведінку водійського посвідчення
 */
class DriverLicense {
  // Властивості (properties) - це характеристики об'єкта, його стан
  // Кожна властивість має тип даних, що забезпечує type safety в TypeScript

  birthDate: string; // Дата народження власника
  category: string; // Категорія водійських прав (A, B, C, D і т.д.)
  documentId: string; // Унікальний номер документа
  firstName: string; // Ім'я власника
  lastName: string; // Прізвище власника
  middleName: string; // По батькові власника
  expirationDate: string; // Дата закінчення дії документа
  lastUpdated: number; // Timestamp останнього оновлення (в мілісекундах)
  authority: string; // Орган що видав документ
  categoryIssuingDate: string; // Дата отримання певної категорії
  photo: string | Buffer; // Фото власника (може бути шляхом до файлу або бінарними даними)

  /**
   * Конструктор - це спеціальний метод який викликається при створенні нового об'єкта (екземпляра класу)
   * Він ініціалізує початковий стан об'єкта, встановлюючи значення властивостей
   *
   * @param birthDate - Дата народження у форматі рядка
   * @param category - Категорія водійських прав
   * @param firstName - Ім'я власника
   * @param lastName - Прізвище власника
   * @param middleName - По батькові власника
   * @param authority - Орган що видав посвідчення
   * @param photo - Шлях до фото або сама фотографія
   */
  constructor(
    birthDate: string,
    category: string,
    firstName: string,
    lastName: string,
    middleName: string,
    authority: string,
    photo: string
  ) {
    // Ініціалізація властивостей значеннями, переданими через параметри
    this.birthDate = birthDate;
    this.category = category;
    this.firstName = firstName;
    this.lastName = lastName;
    this.middleName = middleName;
    this.authority = authority;
    this.photo = photo;

    // Автоматична генерація унікального ID документа
    // "APC" - префікс + випадкове число від 0 до 1000
    this.documentId = "APC" + Math.random() * 1_000;

    // Встановлення часу створення/останнього оновлення у мілісекундах
    // getTime() повертає кількість мілісекунд з 1 січня 1970 року
    this.lastUpdated = new Date().getTime();
  }

  /**
   * Методи (methods) - це функції які описують поведінку об'єкта, дії які він може виконувати
   * Вони мають доступ до властивостей об'єкта через ключове слово 'this'
   */

  /**
   * Повертає копію ID документа
   * Корисно для отримання номера документа без надання прямого доступу до властивості
   * @returns {string} ID документа
   */
  copyDocumentId(): string {
    return this.documentId;
  }

  /**
   * Повертає посилання на весь об'єкт з усією інформацією
   * Дозволяє отримати доступ до всіх даних водійського посвідчення
   * @returns {DriverLicense} Поточний екземпляр об'єкта
   */
  showFullInformation(): DriverLicense {
    return this;
  }

  /**
   * Симулює процес перекладу документа на іншу мову
   * В реальному застосунку тут була б логіка перекладу тексту
   */
  translate(): void {
    console.log("Translating...");
  }

  /**
   * Ініціює процес заміни документа (наприклад, при втраті або пошкодженні)
   * В реальному застосунку тут була б логіка створення заявки на заміну
   */
  replaceDocument(): void {
    console.log("Creating replace request...");
  }
}

// ===== ВИКОРИСТАННЯ КЛАСУ =====

/**
 * Створення екземплярів (instances) класу - це процес створення конкретних об'єктів
 * на основі шаблону класу. Кожен екземпляр має свої унікальні дані, але спільну поведінку
 */

// Створення першого екземпляра водійського посвідчення
// Ключове слово 'new' викликає конструктор і створює новий об'єкт в пам'яті
const driverLicense = new DriverLicense(
  "17-05-1990",
  "B",
  "Павло",
  "Сафонов",
  "Володимировч",
  "МРЕО",
  "C://photo/img.png"
);

// Створення другого екземпляра з іншими даними
// Це абсолютно незалежний об'єкт з власним станом
const driverLicense1 = new DriverLicense(
  "11-01-1991",
  "B",
  "Zoya",
  "Вуйко",
  "Любомирівна",
  "МРЕО",
  "C://photo/img.png"
);

// Виведення повної інформації про об'єкти в консоль
// Це покаже всі властивості кожного екземпляра, включаючи згенеровані автоматично
console.log("Перше водійське посвідчення:", driverLicense1);
console.log("Друге водійське посвідчення:", driverLicense);

// Виклик методу для першого об'єкта
// Демонструє, що кожен об'єкт може виконувати дії, визначені в класі
driverLicense.replaceDocument();
