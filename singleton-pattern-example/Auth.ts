/*
Ключові елементи паттерну Singleton:
Приватний конструктор - запобігає створенню нових екземплярів через new
Статичне поле instance - зберігає єдиний екземпляр класу
Статичний метод getInstance() - забезпечує контрольований доступ до екземпляру
Lazy initialization - екземпляр створюється тільки при першому виклику getInstance()

Переваги використання:
Гарантує існування лише одного екземпляру класу
Глобальна точка доступу до екземпляру
Економія пам'яті при роботі з ресурсомісткими об'єктами
Цей паттерн особливо корисний для класів як Auth, оскільки система аутентифікації повинна бути єдиною в додатку.
*/

class Auth {
  // Приватне статичне поле для зберігання єдиного екземпляру класу
  private static instance: Auth;

  // Статичний метод для отримання єдиного екземпляру
  static getInstance() {
    // Перевіряємо чи існує екземпляр, якщо ні - створюємо його
    if (!Auth.instance) {
      Auth.instance = new Auth();
    }
    // Повертаємо існуючий або новостворений екземпляр
    return Auth.instance;
  }

  // Приватний конструктор запобігає створенню екземплярів через `new Auth()`
  private constructor() {
    console.log("Auth instance created");
  }

  // Методи класу для роботи з аутентифікацією
  establishAuthChannel() {
    console.log("Establishing authentication channel...");
  }

  rejoin() {
    console.log("Rejoining authentication...");
  }
}

// Отримуємо єдиний екземпляр класу
const auth = Auth.getInstance();
